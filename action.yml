name: "FluxCD Reconcile"
description: "Trigger FluxCD reconciliation for HelmChart and HelmRelease"
author: "starburst997"
branding:
  icon: "refresh-cw"
  color: "purple"

inputs:
  kube-config:
    description: "Kubernetes configuration (base64 encoded or plain text)"
    required: true
  name:
    description: "Simple mode: Application name (will generate chart-name as 'name-name' and use as release-name)"
    required: false
  namespace:
    description: "Simple mode: Application namespace (will use as release-namespace)"
    required: false
  chart-name:
    description: "Name of the HelmChart to reconcile (ignored if 'name' is provided)"
    required: false
  registry-namespace:
    description: "Namespace where the HelmChart source is located"
    required: false
    default: "flux-registry"
  release-name:
    description: "Name of the HelmRelease to reconcile (ignored if 'name' is provided)"
    required: false
  release-namespace:
    description: "Namespace where the HelmRelease is located (ignored if 'namespace' is provided)"
    required: false
  chart-timeout:
    description: "Timeout for HelmChart reconciliation"
    required: false
    default: "2m"
  release-timeout:
    description: "Timeout for HelmRelease reconciliation"
    required: false
    default: "5m"
  git-push:
    description: "Push commits and tags to remote repository"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Setup kubectl
      uses: azure/setup-kubectl@v4

    - name: Configure kubectl
      shell: bash
      run: |
        mkdir -p ~/.kube
        echo "${{ inputs.kube-config }}" > ~/.kube/config
        chmod 600 ~/.kube/config
        echo "âœ… Configured kubectl"

    - name: Install FluxCD CLI
      shell: bash
      run: |
        if ! command -v flux &> /dev/null; then
          echo "ðŸ“¦ Installing FluxCD CLI..."
          curl -s https://fluxcd.io/install.sh | sudo bash
          echo "âœ… FluxCD CLI installed"
        else
          echo "âœ… FluxCD CLI already available"
        fi

    - name: Reconcile HelmChart
      shell: bash
      run: |
        # Determine chart name and registry namespace
        if [[ -n "${{ inputs.name }}" ]]; then
          CHART_NAME="${{ inputs.name }}-${{ inputs.name }}"
          REGISTRY_NS="${{ inputs.registry-namespace }}"
        else
          CHART_NAME="${{ inputs.chart-name }}"
          REGISTRY_NS="${{ inputs.registry-namespace }}"
        fi

        echo "ðŸ”„ Reconciling HelmChart '${CHART_NAME}' in namespace '${REGISTRY_NS}'..."
        flux reconcile source chart ${CHART_NAME} \
          -n ${REGISTRY_NS} \
          --timeout=${{ inputs.chart-timeout }}
        echo "âœ… HelmChart reconciled successfully"

    - name: Reconcile HelmRelease
      shell: bash
      run: |
        # Determine release name and namespace
        if [[ -n "${{ inputs.name }}" ]]; then
          RELEASE_NAME="${{ inputs.name }}"
          RELEASE_NS="${{ inputs.namespace }}"
        else
          RELEASE_NAME="${{ inputs.release-name }}"
          RELEASE_NS="${{ inputs.release-namespace }}"
        fi

        echo "ðŸ”„ Reconciling HelmRelease '${RELEASE_NAME}' in namespace '${RELEASE_NS}'..."
        flux reconcile helmrelease ${RELEASE_NAME} \
          -n ${RELEASE_NS} \
          --timeout=${{ inputs.release-timeout }}
        echo "âœ… HelmRelease reconciled successfully"

    - name: Push commits and tags
      if: inputs.git-push == 'true'
      shell: bash
      run: |
        echo "ðŸš€ Pushing all changes and tags to remote repository"

        # Push tags only
        git push --force origin --tags

        # Push all changes
        git push

        echo "âœ… Successfully pushed all changes and tags"
